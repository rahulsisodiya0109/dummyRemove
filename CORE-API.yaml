openapi: 3.0.1
info:
  title: Space and Time Router API
  version: '1.0'
servers:
  - url: http://localhost:8083
    description: Generated server url
security:
  - accessToken: []
paths:
  /v1/mgmt/reflection/ddl:
    post:
      tags:
        - Blockchain Reflection Support
      description: Should not be publicly documented
      operationId: executeBlockchainReflectionDDL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockchainDDLRequest'
        required: true
      responses:
        '200':
          description: OK
  /sql/views/{viewName}:
    post:
      tags:
        - View API
      summary: Execute a view
      description: Execute a view by name using this endpoint
      operationId: executeView
      parameters:
        - name: viewName
          in: path
          description: The view identifier (unique name)
          required: true
          schema:
            type: string
        - name: originApp
          in: header
          description: origin app
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
  /sql/views-by-id/{viewId}:
    post:
      tags:
        - View API
      summary: Execute a view
      description: Execute a view by UUID using this endpoint
      operationId: executeViewById
      parameters:
        - name: viewId
          in: path
          description: The view identifier (UUID)
          required: true
          schema:
            type: string
            format: uuid
        - name: originApp
          in: header
          description: origin app
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
  /sql/dql:
    post:
      tags:
        - Core SQL API
      summary: Execute queries (DQL)
      description: Perform all `SELECT` commands (queries) using this endpoint
      operationId: executeDql
      parameters:
        - name: biscuit
          in: header
          description: Authorization token
          required: false
          schema:
            type: string
        - name: originApp
          in: header
          description: origin app
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlDqlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '201':
          description: CREATED
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
  /sql/dml:
    post:
      tags:
        - Core SQL API
      summary: Modify data (DML)
      description: Perform all `INSERT`, `UPDATE`, `MERGE`, `DELETE` commands using this endpoint
      operationId: executeDml
      parameters:
        - name: biscuit
          in: header
          description: Authorization token
          required: false
          schema:
            type: string
        - name: originApp
          in: header
          description: origin app
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlDmlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
  /sql/ddl:
    post:
      tags:
        - Core SQL API
      summary: Configure Resources (DDL)
      description: Perform all `CREATE`, `ALTER`, `DROP` commands using this endpoint
      operationId: executeDDLQuery
      parameters:
        - name: biscuit
          in: header
          description: Authorization token
          required: false
          schema:
            type: string
        - name: originApp
          in: header
          description: origin app
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlDdlRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageJson'
  /v1/mgmt/reflection:
    get:
      tags:
        - Blockchain Reflection Support
      summary: API to see what reflections currently exist
      operationId: getReflectionTables
      parameters:
        - name: chainId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    BlockchainDDLRequest:
      type: object
      properties:
        userId:
          type: string
        chainId:
          type: string
        schema:
          type: string
        tableId:
          type: string
        ddlText:
          type: string
    ParamRequest:
      type: object
      properties:
        params:
          type: object
          additionalProperties:
            type: string
      description: The (optional) view parameters. Note that the parameter names must match what was specified when the view was created/updated.
    MessageJson:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
        status:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
    SqlDqlRequest:
      required:
        - resourceId
        - sqlText
      type: object
      properties:
        resourceId:
          type: string
          description: The unique resource identifier (e.g. SCHEMA_NAME.TABLE_NAME)
          example: PUBLIC.CUSTOMER
        sqlText:
          type: string
          description: The raw SQL text to execute
          example: INSERT INTO PUBLIC.CUSTOMER VALUES(0 'hello world')
        rowCount:
          type: integer
          description: Limits the maximum number of rows returned
          format: int64
          example: 100
          default: 100
        biscuits:
          type: array
          description: The (optional) biscuits needed to authorize the request
          items:
            type: string
            description: The (optional) biscuits needed to authorize the request
    SqlDmlRequest:
      required:
        - resourceId
        - sqlText
      type: object
      properties:
        resourceId:
          type: string
          description: The unique resource identifier (e.g. SCHEMA_NAME.TABLE_NAME)
          example: PUBLIC.CUSTOMER
        sqlText:
          type: string
          description: The raw SQL text to execute
          example: INSERT INTO PUBLIC.CUSTOMER VALUES(0 'hello world')
        biscuits:
          type: array
          description: The (optional) biscuits needed to authorize the request
          items:
            type: string
            description: The (optional) biscuits needed to authorize the request
    SqlDdlRequest:
      required:
        - sqlText
      type: object
      properties:
        sqlText:
          type: string
          description: The raw SQL text to execute
          example: CREATE TABLE PUBLIC.CUSTOMER (ID INT, NAME VARCHAR, PRIMARY KEY (ID)) WITH "public_key=7F203DBB72A95062FAE1404B4599EED6B72C4D747E8F6851D7C073D4D6984F9A,access_type=public_read"
        biscuits:
          type: array
          description: The (optional) biscuits needed to authorize the request
          items:
            type: string
            description: The (optional) biscuits needed to authorize the request
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
